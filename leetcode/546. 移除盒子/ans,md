```c++ // 太难了，看官方题解吧。https://leetcode-cn.com/problems/remove-boxes/

class Solution {
public:
    int dp[100][100][100];
    int removeBoxes(vector<int>& boxes) {
        memset(dp,0,sizeof dp);
        return cal(boxes,0,boxes.size()-1,0);
    }
    int cal(vector<int>& boxes,int l,int r, int k){
        if (l>r)return 0;
        // if (l==r)return (k+1)*(k+1);
        if (dp[l][r][k]!=0){
            return dp[l][r][k];
        }
        // dp[l][r][k] = dp[l][r-1][0] + (k+1)*(k+1);
        while(r > l && boxes[r] == boxes[r-1]){
            r--;
            k++;
        }
        dp[l][r][k] = cal(boxes,l,r-1,0) + (k+1)*(k+1);
        for(int i=l+1;i<r;i++){//注：从l开始，l处也可能出现解。
            if (boxes[i] == boxes[r]){
                dp[l][r][k] = max(dp[l][r][k],cal(boxes,l,i,k+1)+cal(boxes,i+1,r-1,0));
            }
        }
        return dp[l][r][k];
    }
};
```